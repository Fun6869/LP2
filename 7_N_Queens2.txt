def is_safe(board, row, col, n):
    for i in range(row):
        if board[i] == col or \
           abs(board[i] - col) == abs(i - row):
            return False
    return True

def solve_n_queens_util(board, row, n, solutions):
    if row == n:
        solutions.append(board[:])
        return

    for col in range(n):
        if is_safe(board, row, col, n):
            board[row] = col
            solve_n_queens_util(board, row + 1, n, solutions)
            board[row] = -1  # backtrack

def solve_n_queens(n):
    board = [-1] * n
    solutions = []
    solve_n_queens_util(board, 0, n, solutions)
    return solutions

def print_solutions(solutions):
    for index, sol in enumerate(solutions):
        print(f"Solution {index + 1}:")
        for i in sol:
            row = ['[ ]'] * len(sol)
            row[i] = '[Q]'
            print(' '.join(row))
        print()

# Example usage
n = 4  # Change this to 8 for 8-Queens
solutions = solve_n_queens(n)
print(f"Total solutions for {n}-Queens: {len(solutions)}\n")
print_solutions(solutions)