import heapq

def prim_mst(graph, start=0):
    n = len(graph)
    visited = [False] * n
    min_heap = [(0, start, -1)]  # (weight, current_vertex, parent_vertex)
    mst_edges = []
    mst_cost = 0

    while min_heap:
        weight, u, parent = heapq.heappop(min_heap)
        if visited[u]:
            continue  # Skip if already visited

        visited[u] = True
        mst_cost += weight
        if parent != -1:  # Avoid adding "fake" edge for the start node
            mst_edges.append((parent, u, weight))

        # Add adjacent edges to the heap
        for v, edge_weight in graph[u]:
            if not visited[v]:
                heapq.heappush(min_heap, (edge_weight, v, u))

    print("Edges in MST:")
    for u, v, weight in mst_edges:
        print(f"{u} - {v} : {weight}")
    print("Total cost of MST:", mst_cost)

# Example graph
graph = {
    0: [(1, 2), (3, 6)],
    1: [(0, 2), (2, 3), (3, 8), (4, 5)],
    2: [(1, 3), (4, 7)],
    3: [(0, 6), (1, 8), (4, 9)],
    4: [(1, 5), (2, 7), (3, 9)]
}

prim_mst(graph, start=0)